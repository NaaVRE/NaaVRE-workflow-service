apiVersion: argoproj.io/v1alpha1
{% if cron_schedule %}
kind: CronWorkflow
{% else %}
kind: Workflow
{% endif %}
metadata:
  generateName: {{ workflow_name }}-
  labels:
    vlab_slug: {{ vlab_slug }}
spec:
    {% if cron_schedule %}
    schedule: "{{ cron_schedule }}"
    {% else %}
    workflowSpec:
    {% endif %}
    entrypoint: {{ workflow_name }}
    serviceAccountName: {{ workflow_service_account }}
    volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: [ "ReadWriteMany" ]
        persistentVolumeReclaimPolicy: Delete
        resources:
          requests:
            storage: {{ workdir_storage_size }}
    arguments:
      parameters:
      {% for param in global_params %}
      - name: {{ param.name }}
        value:  "{{ param.default_value | replace('"', "'") }}"
      {% endfor %}
    templates:
    - name: {{ workflow_name }}
      dag:
        tasks:
        {% for node in nodes.values() %}
        {% set is_special_node = node.type == 'splitter' or node.type == 'merger' or node.type == 'visualizer' %}
        {% set is_splitter = node.type == 'splitter' %}
        {% set is_visualizer = node.type == 'visualizer' %}
        {% set title =  node.type + "-" + node.id[:7] if is_special_node else node.properties.cell.title+ "-" + node.id[:7] %}
        {% set params =  [] if is_special_node else node.properties.cell.params %}
        {# {% if 'visualize-' in title %}
        - name: {{ title }}-server
          dependencies: [{{ title }}]
          template: {{ title }}-server-tmp
        {% endif %} #}
        - name: {{ title }}
          {% if deps_dag[node.id]|length > 0 %}
          dependencies: [{% for d in deps_dag[node.id] %} {{ d.task_name }}{% if not loop.last %},{% endif %} {% endfor %}]
          {% endif %}
          template: {{ title }}-tmp
          {% if deps_dag[node.id]|length > 0 or params|length > 0 %}
          arguments:
            parameters:
            {% for d in deps_dag[node.id] %}
            - name: {{ d.port_id }}
            {% if d.type == "splitter" %}
              value: {{ '"{{item}}"' }}
            {% else %}
              value: {{ '"{{tasks.' }}{{ d.task_name }}{{ '.outputs.parameters.' }}{{ d.port_id }}{{'}}"'}}
            {% endif %}
            {% endfor %}
            {% for p in params %}
            - name : {{ p.name }}
              value: {{ '"{{workflow.parameters.' }}{{ p.name }}{{'}}"' }}
            {% endfor %}
          {% for d in deps_dag[node.id] %}
          {% if d.type == "splitter" %}
          withParam: {{ '"{{tasks.' }}{{ d.task_name }}{{ '.outputs.parameters.' }}{{ d.port_id }}{{'}}"'}}
          {% endif %}
          {% endfor %}
          {% endif %}
        {% endfor %}
    {% for node in nodes.values() %}
    {% set is_special_node = node.type == 'splitter' or node.type == 'merger' or node.type == 'visualizer' %}
    {% set is_splitter = node.type == 'splitter' %}
    {% set is_visualizer = node.type == 'visualizer' %}
    {% set title = node.type + "-" + node.id[:7] if is_special_node else node.properties.cell.title + "-" + node.id[:7] %}
    {% set params = [] if is_special_node else node.properties.cell.params %}
    {% set secrets = [] if is_special_node else node.properties.cell.secrets %}
    {% set ports = node.ports %}
    {# {% if 'visualize-' in title %}
    - name: {{ title }}-server-tmp
      container:
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
          - echo "Starting server"
    {% endif %} #}
    - name: {{ title }}-tmp
      {% if deps_dag[node.id]|length > 0 %}
      inputs:
        parameters:
        {% for d in deps_dag[node.id] %}
        - name: {{ d.port_id }}
        {% endfor %}
        {% for p in params %}
        - name: {{ p.name }}
        {% endfor %}
      {% endif %}
      outputs:
        parameters:
        {% for port in ports.values() %}
        {% if port.type == 'right' %}
          - name: {{ port.id }}_{{ node.id[:7] }}
            valueFrom:
              path: /tmp/{{ port.id }}_{{ node.id[:7] }}.json
        {% endif %}
        {% endfor %}
      {% if is_special_node and not is_visualizer %}
      {% set special_dep = deps_dag[node.id][0] %}
      script:
        image: python:alpine3.9
        imagePullPolicy: IfNotPresent
        command: [python]
        source: |
          import json
          {{ special_dep.port_id }} = {{ '{{inputs.parameters.' }}{{ special_dep.port_id }}{{ '}}' }}
          {% for port in ports.values() %}
          {% if port.type == 'right' %}
          {% if is_splitter %}
          {# splitter logic #}
          list_of_lists = []
          for elem in {{special_dep.port_id}}:
            list = [elem]
            list_of_lists.append(list)
          f_out = open("/tmp/{{port.id}}_{{ node.id[:7] }}.json", "w")
          f_out.write(json.dumps(list_of_lists))
          f_out.close()
          {% else %}
          {# Merger logic #}
          {{special_dep.port_id}} = [item for items in {{special_dep.port_id}} for item in json.loads(items)]
          f_out = open("/tmp/{{port.id}}_{{ node.id[:7] }}.json", "w")
          f_out.write(json.dumps({{special_dep.port_id}}))
          f_out.close()
          {% endif %}
          {% endif %}
          {% endfor %}
      {% elif is_visualizer %}
      container:
        image: "qcdis/geotiff_viewer:v0.2.6"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - python /app/python_scripts/main.py
            {% for d in deps_dag[node.id] %}
            {% set is_from_special = d.type == 'splitter' or  d.type == 'merger' %}
            {% set stdinname = d.og_port_id if is_from_special else d.port_id %}
            {% set stdinname_base = stdinname.split('_')[:-1]|join('_') %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d.port_id }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p.name }} '{{ '{{workflow.parameters.' }}{{ p.name }}{{ '}}' }}'
            {% endfor %}
            && npm start
      metadata:
        labels:
          app: naavre-visualizer
      {% else %}
      container:
        image: "{{ node.properties.cell.container_image }}"
        imagePullPolicy: Always
        volumeMounts:
        - name: workdir
          mountPath: /tmp/data
        env:
        {%  for s in secrets %}
          - name: {{ s.name }}
            valueFrom:
              secretKeyRef:
                name: {{ k8s_secret_name }}
                key: {{ s.name }}
        {%  endfor %}
        command: ["/bin/bash", "-c"]
        args:
        {% if 'visualize-' in node.properties.cell.title %}
          - source /venv/bin/activate; ipython kernel install --user; python /app/task.py
            {% for d in deps_dag[node.id] %}
            {% set is_from_special = d.type == 'splitter' or  d.type == 'merger' %}
            {% set stdinname = d.og_port_id if is_from_special else d.port_id %}
            {% set stdinname_base = stdinname.split('_')[:-1]|join('_') %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d.port_id }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p.name }} '{{ '{{workflow.parameters.' }}{{ p.name }}{{ '}}' }}'
            {% endfor %}
            --id {{ node.id[:7] }};
            jupyter execute /app/task-output.ipynb --allow-errors;
            jupyter nbconvert --no-input --execute /app/task-output.ipynb --to html;
            cp /app/task-output.html /tmp/data/{{ title }}-output.html;
            jupyter notebook --port 5173 --NotebookApp.ip='0.0.0.0' --NotebookApp.allow_origin='*' --NotebookApp.base_url=/naavre-visualizer-notebook
      metadata:
        labels:
          app: naavre-visualizer-notebook
        {% elif node.properties.cell.kernel == 'ipython' %}
          - source /venv/bin/activate; python /app/task.py
            {% for d in deps_dag[node.id] %}
            {% set is_from_special = d.type == 'splitter' or  d.type == 'merger' %}
            {% set stdinname = d.og_port_id if is_from_special else d.port_id %}
            {% set stdinname_base = stdinname.split('_')[:-1]|join('_') %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d.port_id }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p.name }} {{ '"{{workflow.parameters.' }}{{ p.name }}{{ '}}"' }}
            {% endfor %}
            --id {{ node.id[:7] }};
        {% elif node.properties.cell.kernel == 'IRkernel' %}
          - source /venv/bin/activate; Rscript /app/task.R
            {% for d in deps_dag[node.id] %}
            {% set is_from_special = d.type == 'splitter' or  d.type == 'merger' %}
            {% set stdinname = d.og_port_id if is_from_special else d.port_id %}
            {% set stdinname_base = stdinname.split('_')[:-1]|join('_') %}
            --{{ stdinname_base }} '{{ '{{inputs.parameters.' }}{{ d.port_id }}{{ '}}' }}'
            {% endfor %}
            {% for p in params %}
            --{{ p.name }} {{ '"{{workflow.parameters.' }}{{ p.name }}{{ '}}"' }}
            {% endfor %}
            --id {{ node.id[:7] }};
        {% endif %}
      {% endif %}
    {% endfor %}